/**
 * 
 */
package book.karumanchi.ds.Tree.Questions;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import book.karumanchi.ds.Tree.BinaryTreeNode;

/**
 * @author subratt
 *
 */
public class LevelOrderTraversalReverse extends BinaryTreeNode{

	
	
	public LevelOrderTraversalReverse(int data) {
		super(data);
		// TODO Auto-generated constructor stub
	}
	/*
	 * The simplest and most efficient method to get LevelOrderTraversal in reverse order is by using Stack and Queue
	 */
	public static void getLevelOrderTraversalReverse(BinaryTreeNode root){
		Stack<Integer> reverseOrder= new Stack<Integer>();
		Queue<BinaryTreeNode> levelOrderQueue = new LinkedList<BinaryTreeNode>();
		if(root ==null){
			return;
		}
		levelOrderQueue.offer(root);
		while(!levelOrderQueue.isEmpty()){
			BinaryTreeNode node=levelOrderQueue.poll();

			if(node.getRight() != null){
				levelOrderQueue.offer(node.getRight());
				//reverseOrder.push(node.getRight().getData());
			}
			if(node.getLeft() != null){
				levelOrderQueue.offer(node.getLeft());
				//reverseOrder.push(node.getLeft().getData());
			}
			reverseOrder.push(node.getData());
			
		}
		
		while(!reverseOrder.isEmpty()){
			System.out.print(reverseOrder.pop() + "->");
		}
	}
	
	/*
	 * The simplest and most efficient method to get Reverse LevelOrderTraversal using recursion
	 */
	
	public static void getLevelOrderTraversalReverseRecursive(BinaryTreeNode root){
		int height = getHeight(root);
		for(int i=height;i >= 1;i--)
		{
			printGivenLevel(root , i);
		}
	}
	
	public static void printGivenLevel(BinaryTreeNode root, int level){
		  if(root == null)
			  return;
          if(level == 1)
          System.out.print(root.getData() + "->");
          else
          {
        	  printGivenLevel(root.getLeft() , level-1);
        	  printGivenLevel(root.getRight() , level-1);
          }
          
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		BinaryTreeNode root= new BinaryTreeNode(1);
		BinaryTreeNode child11= new BinaryTreeNode(2);
		BinaryTreeNode child12= new BinaryTreeNode(3);
		BinaryTreeNode child111= new BinaryTreeNode(4);
		BinaryTreeNode child1112= new BinaryTreeNode(5);
		BinaryTreeNode child1111= new BinaryTreeNode (6);
		root.setLeft(child11);
		root.setRight(child12);
		child11.setLeft(child111);
		child111.setLeft(child1111);
		child111.setRight(child1112);
		//getLevelOrderTraversalReverse(root);
		getLevelOrderTraversalReverseRecursive(root);

	}

}
