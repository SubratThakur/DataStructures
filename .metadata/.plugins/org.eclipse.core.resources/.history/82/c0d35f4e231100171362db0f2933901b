/**
 * 
 */
package book.karumanchi.ds.Tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author subratt
 *
 */
public class BinaryTreeNode {

	/**
	 * @param args
	 */
	private int data;
	private BinaryTreeNode left;
	private BinaryTreeNode right;
	private static int nodeCount=0;
	

	public BinaryTreeNode(int data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}
	
	
	
	public int getData() {
		return data;
	}



	public void setData(int data) {
		this.data = data;
	}



	public BinaryTreeNode getLeft() {
		return left;
	}



	public void setLeft(BinaryTreeNode left) {
		this.left = left;
	}



	public BinaryTreeNode getRight() {
		return right;
	}



	public void setRight(BinaryTreeNode right) {
		this.right = right;
	}
	
	public static String getInorderTraversal (BinaryTreeNode root, List<Integer> inorderTraversal){
		if(root == null){
			return null;
		}
		if(inorderTraversal==null){
			inorderTraversal= new ArrayList<Integer>();
		}

		BinaryTreeNode.getInorderTraversal(root.getLeft(), inorderTraversal);	
		inorderTraversal.add(root.getData());	
		BinaryTreeNode.getInorderTraversal(root.getRight(), inorderTraversal);	
		
		return inorderTraversal.toString();
		
	}
	
	public static int getNodeCount(BinaryTreeNode root) {
		if(root !=null){
			nodeCount++;
		}
		else{
			return 0;
		}
		BinaryTreeNode.getNodeCount(root.left);
		BinaryTreeNode.getNodeCount(root.right);
		return nodeCount;
		
	}
	/*
	 * Recursive method to find height of tree
	 */
	public static int getHeight(BinaryTreeNode root){
		int height=0;
		if(root ==null){
			return 0;
		}
		int leftSubTreeHeight=getHeight(root.getLeft());
		int rightSubTreeHeight=getHeight(root.getRight());
		if(leftSubTreeHeight>=rightSubTreeHeight){
			height=height+leftSubTreeHeight+1;
		}else{
			height=height+leftSubTreeHeight+1;
		}
		return height;
	}
	
	public static int getMaximum (BinaryTreeNode root) {
		if(root ==null) {
			return 0;
		}
		int maxFromLeftTree=getMaximum (root.left);
		int maxFromRightTree = getMaximum(root.right);
		int maxValue= maxFromLeftTree>maxFromRightTree?maxFromLeftTree:maxFromRightTree;
		return maxValue;
	}
	
	public static String getLevelOrderTraversal(BinaryTreeNode root){
		if(root == null){
			return null;
		}
		 List<Integer> levelorderTraversal= new ArrayList<Integer>();
		 Queue levelOrderQueue= new LinkedList<BinaryTreeNode>();
		
		levelOrderQueue.offer(root);
		while(!levelOrderQueue.isEmpty()){
			BinaryTreeNode node= (BinaryTreeNode) levelOrderQueue.poll();
			levelorderTraversal.add(node.getData());
			if(node.getLeft() !=null)
			levelOrderQueue.offer(node.getLeft());
			if(node.getRight() !=null)
			levelOrderQueue.offer(node.getRight());
		}
		
		return levelorderTraversal.toString();
	}

	public static void main(String[] args) {
		System.out.println("Binary Tree implimentation");
		BinaryTreeNode root= new BinaryTreeNode(1);
		BinaryTreeNode child11= new BinaryTreeNode(2);
		BinaryTreeNode child12= new BinaryTreeNode(3);
		BinaryTreeNode child111= new BinaryTreeNode(4);
		BinaryTreeNode child1112= new BinaryTreeNode(5);
		root.setLeft(child11);
		root.setRight(child12);
		child11.setLeft(child111);
		child111.setRight(child1112);
		System.out.println(getNodeCount(root));
		System.out.println("Inorder Traversal for tree is" +getInorderTraversal(root,null));
		System.out.println("Level Order Traversal for tree is"+getLevelOrderTraversal(root));
		System.out.println("Height of the tree :" + getHeight(root));
		System.out.println("Maximum of the tree :" + getMaximum(root));
	}

}
