/**
 * 
 */
package book.karumanchi.ds.Tree.Questions;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

import book.karumanchi.ds.Tree.BinaryTreeNode;

/**
 * @author subratt
 *
 */
public class LevelOrderTraversalReverse extends BinaryTreeNode{

	
	
	public LevelOrderTraversalReverse(int data) {
		super(data);
		// TODO Auto-generated constructor stub
	}
	/*
	 * The simplest and most efficient method to get LevelOrderTraversal in reverse order is by using Stack and Queue
	 */
	public static void getLevelOrderTraversalReverse(BinaryTreeNode root){
		Stack<BinaryTreeNode> reverseOrder= new Stack<BinaryTreeNode>();
		Queue<BinaryTreeNode> levelOrderQueue = new LinkedList<BinaryTreeNode>();
		if(root ==null){
			return;
		}
		levelOrderQueue.offer(root);
		reverseOrder.push(root);
		while(!levelOrderQueue.isEmpty()){
			BinaryTreeNode node=levelOrderQueue.poll();
			if(node.getLeft() != null){
				levelOrderQueue.offer(node.getLeft());
			}
			if(node.getRight() != null){
				levelOrderQueue.offer(node.getRight());
			}
			reverseOrder.push(node.getLeft());
			reverseOrder.push(node.getRight());
		}
		
		while(!reverseOrder.isEmpty()){
			System.out.println(reverseOrder.pop() + "->")
		}
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
