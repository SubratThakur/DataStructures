/**
 * 
 */
package book.karumanchi.ds.Tree;

/**
 * @author subratt
 *
 */
public class BinaryTree {

	/**
	 * @param args
	 */
	int data;
	BinaryTree left;
	BinaryTree right;
	

	public BinaryTree(int data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}
	
	
	
	public int getData() {
		return data;
	}



	public void setData(int data) {
		this.data = data;
	}



	public BinaryTree getLeft() {
		return left;
	}



	public void setLeft(BinaryTree left) {
		this.left = left;
	}



	public BinaryTree getRight() {
		return right;
	}



	public void setRight(BinaryTree right) {
		this.right = right;
	}
	
	public int[] GetInorderTraversal (BinaryTree root){
		int[] inorderTraversal= new int[getHeight(root)];
		return null;
		
	}
	
	public static int getHeight(BinaryTree root) {
		int height=0;
		if(root !=null){
			height++;
		}
		else{
			return 0;
		}
		BinaryTree.getHeight(root.left);
		BinaryTree.getHeight(root.right);
		return height;
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Binary Tree");
	}

}
