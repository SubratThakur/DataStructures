/**
 * 
 */
package book.karumanchi.ds.Tree;

/**
 * @author subratt
 *
 */
public class BinaryTreeNode {

	/**
	 * @param args
	 */
	int data;
	BinaryTreeNode left;
	BinaryTreeNode right;
	

	public BinaryTreeNode(int data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}
	
	
	
	public int getData() {
		return data;
	}



	public void setData(int data) {
		this.data = data;
	}



	public BinaryTreeNode getLeft() {
		return left;
	}



	public void setLeft(BinaryTreeNode left) {
		this.left = left;
	}



	public BinaryTreeNode getRight() {
		return right;
	}



	public void setRight(BinaryTreeNode right) {
		this.right = right;
	}
	
	public int[] GetInorderTraversal (BinaryTreeNode root){
		int[] inorderTraversal= new int[getHeight(root)];
		return null;
		
	}
	
	public static int getNodeCount(BinaryTreeNode root) {
		int height=0;
		if(root !=null){
			height++;
		}
		else{
			return 0;
		}
		BinaryTreeNode.getHeight(root.left);
		BinaryTreeNode.getHeight(root.right);
		return height;
		
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Binary Tree implimentation");
		BinaryTreeNode root= new BinaryTreeNode(1);
		BinaryTreeNode child11= new BinaryTreeNode(2);
		BinaryTreeNode child12= new BinaryTreeNode(3);
		BinaryTreeNode child111= new BinaryTreeNode(4);
		BinaryTreeNode child1111= new BinaryTreeNode(5);
		root.setLeft(child11);
		root.setRight(child12);
		child11.setLeft(child111);
		child111.setRight(child12);
	}

}
