/**
 * 
 */
package book.karumanchi.ds.Tree;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * @author subratt
 *
 */
public class BinaryTreeNode {

	/**
	 * @param args
	 */
	private int data;
	private BinaryTreeNode left;
	private BinaryTreeNode right;
	private static int nodeCount=0;
	

	public BinaryTreeNode(int data) {
		super();
		this.data = data;
		this.left = null;
		this.right = null;
	}
	
	
	
	public int getData() {
		return data;
	}



	public void setData(int data) {
		this.data = data;
	}



	public BinaryTreeNode getLeft() {
		return left;
	}



	public void setLeft(BinaryTreeNode left) {
		this.left = left;
	}



	public BinaryTreeNode getRight() {
		return right;
	}



	public void setRight(BinaryTreeNode right) {
		this.right = right;
	}
	
	public static String getInorderTraversal (BinaryTreeNode root, List<Integer> inorderTraversal){
		if(root == null){
			return null;
		}
		if(inorderTraversal==null){
			inorderTraversal= new ArrayList<Integer>();
		}

		BinaryTreeNode.getInorderTraversal(root.getLeft(), inorderTraversal);	
		inorderTraversal.add(root.getData());	
		BinaryTreeNode.getInorderTraversal(root.getRight(), inorderTraversal);	
		
		return inorderTraversal.toString();
		
	}
	
	public static int getNodeCount(BinaryTreeNode root) {
		if(root !=null){
			nodeCount++;
		}
		else{
			return 0;
		}
		BinaryTreeNode.getNodeCount(root.left);
		BinaryTreeNode.getNodeCount(root.right);
		return nodeCount;
		
	}
	
	public static String getLevelOrder(BinaryTreeNode root, List<Integer> levelorderTraversal, Queue levelOrderQueue){
		if(root == null){
			return null;
		}
		if(levelorderTraversal==null ){
			levelorderTraversal= new ArrayList<Integer>();
		}
		if(levelOrderQueue==null ){
			levelOrderQueue= new LinkedList();
		}
		
		return levelorderTraversal.toString();
	}

	public static void main(String[] args) {
		System.out.println("Binary Tree implimentation");
		BinaryTreeNode root= new BinaryTreeNode(1);
		BinaryTreeNode child11= new BinaryTreeNode(2);
		BinaryTreeNode child12= new BinaryTreeNode(3);
		BinaryTreeNode child111= new BinaryTreeNode(4);
		BinaryTreeNode child1112= new BinaryTreeNode(5);
		root.setLeft(child11);
		root.setRight(child12);
		child11.setLeft(child111);
		child111.setRight(child1112);
		System.out.println(getNodeCount(root));
		System.out.println(getInorderTraversal(root,null));
	}

}
